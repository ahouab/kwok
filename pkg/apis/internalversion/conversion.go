/*
Copyright 2022 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package internalversion

import (
	"k8s.io/apimachinery/pkg/conversion"

	configv1alpha1 "sigs.k8s.io/kwok/pkg/apis/config/v1alpha1"
	"sigs.k8s.io/kwok/pkg/apis/v1alpha1"
)

// Convert_v1alpha1_KwokConfiguration_To_internalversion_KwokConfiguration is an autogenerated conversion function.
//
//nolint:revive
func Convert_v1alpha1_KwokConfiguration_To_internalversion_KwokConfiguration(in *configv1alpha1.KwokConfiguration, out *KwokConfiguration, s conversion.Scope) error {
	return autoConvert_v1alpha1_KwokConfiguration_To_internalversion_KwokConfiguration(in, out, s)
}

// Convert_v1alpha1_KwokctlConfiguration_To_internalversion_KwokctlConfiguration is an autogenerated conversion function.
//
//nolint:revive
func Convert_v1alpha1_KwokctlConfiguration_To_internalversion_KwokctlConfiguration(in *configv1alpha1.KwokctlConfiguration, out *KwokctlConfiguration, s conversion.Scope) error {
	return autoConvert_v1alpha1_KwokctlConfiguration_To_internalversion_KwokctlConfiguration(in, out, s)
}

// Convert_v1alpha1_Stage_To_internalversion_Stage is an autogenerated conversion function.
//
//nolint:revive
func Convert_v1alpha1_Stage_To_internalversion_Stage(in *v1alpha1.Stage, out *Stage, s conversion.Scope) error {
	return autoConvert_v1alpha1_Stage_To_internalversion_Stage(in, out, s)
}

// Convert_v1alpha1_KwokctlConfigurationOptions_To_internalversion_KwokctlConfigurationOptions is an autogenerated conversion function.
//
//nolint:revive
func Convert_v1alpha1_KwokctlConfigurationOptions_To_internalversion_KwokctlConfigurationOptions(in *configv1alpha1.KwokctlConfigurationOptions, out *KwokctlConfigurationOptions, s conversion.Scope) error {
	return autoConvert_v1alpha1_KwokctlConfigurationOptions_To_internalversion_KwokctlConfigurationOptions(in, out, s)
}

// Convert_v1alpha1_ClusterPortForward_To_internalversion_ClusterPortForward is an autogenerated conversion function.
//
//nolint:revive
func Convert_v1alpha1_ClusterPortForward_To_internalversion_ClusterPortForward(in *v1alpha1.ClusterPortForward, out *ClusterPortForward, s conversion.Scope) error {
	return autoConvert_v1alpha1_ClusterPortForward_To_internalversion_ClusterPortForward(in, out, s)
}

// Convert_v1alpha1_PortForward_To_internalversion_PortForward is an autogenerated conversion function.
//
//nolint:revive
func Convert_v1alpha1_PortForward_To_internalversion_PortForward(in *v1alpha1.PortForward, out *PortForward, s conversion.Scope) error {
	return autoConvert_v1alpha1_PortForward_To_internalversion_PortForward(in, out, s)
}

// Convert_v1alpha1_ClusterExec_To_internalversion_ClusterExec is an autogenerated conversion function.
//
//nolint:revive
func Convert_v1alpha1_ClusterExec_To_internalversion_ClusterExec(in *v1alpha1.ClusterExec, out *ClusterExec, s conversion.Scope) error {
	return autoConvert_v1alpha1_ClusterExec_To_internalversion_ClusterExec(in, out, s)
}

// Convert_v1alpha1_Exec_To_internalversion_Exec is an autogenerated conversion function.
//
//nolint:revive
func Convert_v1alpha1_Exec_To_internalversion_Exec(in *v1alpha1.Exec, out *Exec, s conversion.Scope) error {
	return autoConvert_v1alpha1_Exec_To_internalversion_Exec(in, out, s)
}

// ConvertToV1alpha1KwokctlConfiguration converts an internal version KwokctlConfiguration to a v1alpha1.KwokctlConfiguration.
func ConvertToV1alpha1KwokctlConfiguration(in *KwokctlConfiguration) (*configv1alpha1.KwokctlConfiguration, error) {
	var out configv1alpha1.KwokctlConfiguration
	out.APIVersion = configv1alpha1.GroupVersion.String()
	out.Kind = configv1alpha1.KwokctlConfigurationKind
	err := Convert_internalversion_KwokctlConfiguration_To_v1alpha1_KwokctlConfiguration(in, &out, nil)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ConvertToInternalVersionKwokctlConfiguration converts a v1alpha1.KwokctlConfiguration to an internal version.
func ConvertToInternalVersionKwokctlConfiguration(in *configv1alpha1.KwokctlConfiguration) (*KwokctlConfiguration, error) {
	var out KwokctlConfiguration
	err := Convert_v1alpha1_KwokctlConfiguration_To_internalversion_KwokctlConfiguration(in, &out, nil)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ConvertToV1alpha1KwokConfiguration converts an internal version KwokConfiguration to a v1alpha1.KwokConfiguration.
func ConvertToV1alpha1KwokConfiguration(in *KwokConfiguration) (*configv1alpha1.KwokConfiguration, error) {
	var out configv1alpha1.KwokConfiguration
	out.APIVersion = configv1alpha1.GroupVersion.String()
	out.Kind = configv1alpha1.KwokConfigurationKind
	err := Convert_internalversion_KwokConfiguration_To_v1alpha1_KwokConfiguration(in, &out, nil)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ConvertToInternalVersionKwokConfiguration converts a v1alpha1.KwokConfiguration to an internal version.
func ConvertToInternalVersionKwokConfiguration(in *configv1alpha1.KwokConfiguration) (*KwokConfiguration, error) {
	var out KwokConfiguration
	err := Convert_v1alpha1_KwokConfiguration_To_internalversion_KwokConfiguration(in, &out, nil)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ConvertToV1alpha1Stage converts an internal version Stage to a v1alpha1.Stage.
func ConvertToV1alpha1Stage(in *Stage) (*v1alpha1.Stage, error) {
	var out v1alpha1.Stage
	out.APIVersion = v1alpha1.GroupVersion.String()
	out.Kind = v1alpha1.StageKind
	err := Convert_internalversion_Stage_To_v1alpha1_Stage(in, &out, nil)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ConvertToInternalVersionStage converts a v1alpha1.Stage to an internal version.
func ConvertToInternalVersionStage(in *v1alpha1.Stage) (*Stage, error) {
	var out Stage
	err := Convert_v1alpha1_Stage_To_internalversion_Stage(in, &out, nil)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ConvertToV1Alpha1ClusterPortForward converts an internal version ClusterPortForward to a v1alpha1.ClusterPortForward.
func ConvertToV1Alpha1ClusterPortForward(in *ClusterPortForward) (*v1alpha1.ClusterPortForward, error) {
	var out v1alpha1.ClusterPortForward
	out.APIVersion = v1alpha1.GroupVersion.String()
	out.Kind = v1alpha1.ClusterPortForwardKind
	err := Convert_internalversion_ClusterPortForward_To_v1alpha1_ClusterPortForward(in, &out, nil)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ConvertToInternalClusterPortForward converts a v1alpha1.ClusterPortForward to an internal version.
func ConvertToInternalClusterPortForward(in *v1alpha1.ClusterPortForward) (*ClusterPortForward, error) {
	var out ClusterPortForward
	err := Convert_v1alpha1_ClusterPortForward_To_internalversion_ClusterPortForward(in, &out, nil)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ConvertToV1Alpha1PortForward converts an internal version PortForward to a v1alpha1.PortForward.
func ConvertToV1Alpha1PortForward(in *PortForward) (*v1alpha1.PortForward, error) {
	var out v1alpha1.PortForward
	out.APIVersion = v1alpha1.GroupVersion.String()
	out.Kind = v1alpha1.PortForwardKind
	err := Convert_internalversion_PortForward_To_v1alpha1_PortForward(in, &out, nil)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ConvertToInternalPortForward converts a v1alpha1.PortForward to an internal version.
func ConvertToInternalPortForward(in *v1alpha1.PortForward) (*PortForward, error) {
	var out PortForward
	err := Convert_v1alpha1_PortForward_To_internalversion_PortForward(in, &out, nil)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ConvertToV1Alpha1ClusterExec converts an internal version ClusterExec to a v1alpha1.ClusterExec.
func ConvertToV1Alpha1ClusterExec(in *ClusterExec) (*v1alpha1.ClusterExec, error) {
	var out v1alpha1.ClusterExec
	out.APIVersion = v1alpha1.GroupVersion.String()
	out.Kind = v1alpha1.ClusterExecKind
	err := Convert_internalversion_ClusterExec_To_v1alpha1_ClusterExec(in, &out, nil)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ConvertToInternalClusterExec converts a v1alpha1.ClusterExec to an internal version.
func ConvertToInternalClusterExec(in *v1alpha1.ClusterExec) (*ClusterExec, error) {
	var out ClusterExec
	err := Convert_v1alpha1_ClusterExec_To_internalversion_ClusterExec(in, &out, nil)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ConvertToInternalClusterLogs converts a v1alpha1.ClusterLogs to an internal version.
func ConvertToInternalClusterLogs(in *v1alpha1.ClusterLogs) (*ClusterLogs, error) {
	var out ClusterLogs
	err := Convert_v1alpha1_ClusterLogs_To_internalversion_ClusterLogs(in, &out, nil)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ConvertToV1Alpha1Exec converts an internal version Exec to a v1alpha1.Exec.
func ConvertToV1Alpha1Exec(in *Exec) (*v1alpha1.Exec, error) {
	var out v1alpha1.Exec
	out.APIVersion = v1alpha1.GroupVersion.String()
	out.Kind = v1alpha1.ExecKind
	err := Convert_internalversion_Exec_To_v1alpha1_Exec(in, &out, nil)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ConvertToInternalExec converts a v1alpha1.Exec to an internal version.
func ConvertToInternalExec(in *v1alpha1.Exec) (*Exec, error) {
	var out Exec
	err := Convert_v1alpha1_Exec_To_internalversion_Exec(in, &out, nil)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ConvertToV1Alpha1Logs converts an internal version Logs to a v1alpha1.Logs.
func ConvertToV1Alpha1Logs(in *Logs) (*v1alpha1.Logs, error) {
	var out v1alpha1.Logs
	out.APIVersion = v1alpha1.GroupVersion.String()
	out.Kind = v1alpha1.LogsKind
	err := Convert_internalversion_Logs_To_v1alpha1_Logs(in, &out, nil)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ConvertToV1Alpha1ClusterLogs converts an internal version ClusterLogs to a v1alpha1.ClusterLogs.
func ConvertToV1Alpha1ClusterLogs(in *ClusterLogs) (*v1alpha1.ClusterLogs, error) {
	var out v1alpha1.ClusterLogs
	out.APIVersion = v1alpha1.GroupVersion.String()
	out.Kind = v1alpha1.ClusterLogsKind
	err := Convert_internalversion_ClusterLogs_To_v1alpha1_ClusterLogs(in, &out, nil)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ConvertToInternalLogs converts a v1alpha1.Logs to an internal version.
func ConvertToInternalLogs(in *v1alpha1.Logs) (*Logs, error) {
	var out Logs
	err := Convert_v1alpha1_Logs_To_internalversion_Logs(in, &out, nil)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ConvertToV1Alpha1Attach converts an internal version Attach to a v1alpha1.Attach.
func ConvertToV1Alpha1Attach(in *Attach) (*v1alpha1.Attach, error) {
	var out v1alpha1.Attach
	out.APIVersion = v1alpha1.GroupVersion.String()
	out.Kind = v1alpha1.AttachKind
	err := Convert_internalversion_Attach_To_v1alpha1_Attach(in, &out, nil)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ConvertToV1Alpha1ClusterAttach converts an internal version ClusterAttach to a v1alpha1.ClusterAttach.
func ConvertToV1Alpha1ClusterAttach(in *ClusterAttach) (*v1alpha1.ClusterAttach, error) {
	var out v1alpha1.ClusterAttach
	out.APIVersion = v1alpha1.GroupVersion.String()
	out.Kind = v1alpha1.ClusterAttachKind
	err := Convert_internalversion_ClusterAttach_To_v1alpha1_ClusterAttach(in, &out, nil)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ConvertToInternalClusterAttach converts a v1alpha1.ClusterAttach to an internal version.
func ConvertToInternalClusterAttach(in *v1alpha1.ClusterAttach) (*ClusterAttach, error) {
	var out ClusterAttach
	err := Convert_v1alpha1_ClusterAttach_To_internalversion_ClusterAttach(in, &out, nil)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

// ConvertToInternalAttach converts a v1alpha1.Attach to an internal version.
func ConvertToInternalAttach(in *v1alpha1.Attach) (*Attach, error) {
	var out Attach
	err := Convert_v1alpha1_Attach_To_internalversion_Attach(in, &out, nil)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
