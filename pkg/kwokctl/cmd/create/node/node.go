/*
Copyright 2022 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Package node contains a command to create a node.
package node

import (
	"bytes"
	"context"
	"fmt"
	"text/template"

	"github.com/spf13/cobra"
	corev1 "k8s.io/api/core/v1"
	apierrors "k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/kubernetes"
	"k8s.io/client-go/kubernetes/scheme"
	"k8s.io/client-go/tools/clientcmd"

	"sigs.k8s.io/kwok/pkg/log"
	"sigs.k8s.io/kwok/pkg/utils/kubeconfig"
	"sigs.k8s.io/kwok/pkg/utils/path"

	_ "embed"
)

const fakeNodeOriginLabelKey = "kwok.x-k8s.io/node-origin"
const fakeNodeOriginLabelVal = "autogenerated"
const fakeNodeNamePrefixLabelKey = "kwok.x-k8s.io/node-name-prefix"

//go:embed fake_node.yaml.tpl
var fakeNodeYamlTpl string

var fakeNodeYamlTemplate = template.Must(template.New("_").Parse(fakeNodeYamlTpl))

type flagpole struct {
	NamePrefix string
	Size       int
	Kubeconfig string
	Context    string
}

// NewCommand returns a new cobra.Command for cluster creation
func NewCommand(ctx context.Context) *cobra.Command {
	flags := &flagpole{}
	flags.Kubeconfig = path.RelFromHome(kubeconfig.GetRecommendedKubeconfigPath())

	cmd := &cobra.Command{
		Args:  cobra.NoArgs,
		Use:   "node",
		Short: "Creates fake node",
		RunE: func(cmd *cobra.Command, args []string) error {
			return runE(cmd.Context(), flags)
		},
	}

	cmd.Flags().StringVar(&flags.NamePrefix, "name-prefix", flags.NamePrefix, `Fake node name prefix`)
	cmd.Flags().IntVar(&flags.Size, "size", flags.Size, `Fake node size`)
	cmd.Flags().StringVar(&flags.Kubeconfig, "kubeconfig", flags.Kubeconfig, "The path to the kubeconfig file")
	cmd.Flags().StringVar(&flags.Context, "context", flags.Context, "The context of kubeconfig")

	return cmd
}

func runE(ctx context.Context, flags *flagpole) error {
	logger := log.FromContext(ctx)
	ctx = log.NewContext(ctx, logger)

	var err error

	if flags.NamePrefix == "" {
		flags.NamePrefix = "kwok-fake"
	}

	if flags.Kubeconfig != "" {
		flags.Kubeconfig, err = path.Expand(flags.Kubeconfig)
		if err != nil {
			return err
		}
	}

	logger.Debug("create nodes", "kubeconfig", flags.Kubeconfig, "context", flags.Context, "nodePrefix", flags.NamePrefix, "size", flags.Size)
	config, err := clientcmd.NewNonInteractiveDeferredLoadingClientConfig(
		&clientcmd.ClientConfigLoadingRules{ExplicitPath: flags.Kubeconfig},
		&clientcmd.ConfigOverrides{
			CurrentContext: flags.Context,
		}).ClientConfig()
	if err != nil {
		return err
	}

	clientset, err := kubernetes.NewForConfig(config)
	if err != nil {
		return err
	}

	labelMap := map[string]string{fakeNodeOriginLabelKey: fakeNodeOriginLabelVal, fakeNodeNamePrefixLabelKey: flags.NamePrefix}
	selector := labels.SelectorFromSet(labelMap).String()

	nodes, err := clientset.CoreV1().Nodes().List(ctx, metav1.ListOptions{LabelSelector: selector})
	if err != nil {
		return err
	}

	realNum := len(nodes.Items)
	if realNum > flags.Size {
		for i := flags.Size; i < realNum; i++ {
			if err := clientset.CoreV1().Nodes().Delete(ctx, nodes.Items[i].Name, metav1.DeleteOptions{}); err != nil {
				if !apierrors.IsNotFound(err) {
					return err
				}
			}
		}
	} else {
		for i := realNum; i < flags.Size; i++ {
			buf := bytes.NewBuffer(nil)
			if err := fakeNodeYamlTemplate.Execute(buf, map[string]string{"Name": fmt.Sprintf("%s-%d", flags.NamePrefix, i)}); err != nil {
				return err
			}
			decode := scheme.Codecs.UniversalDeserializer().Decode
			decodeObj, _, err := decode(buf.Bytes(), nil, nil)
			if err != nil {
				return err
			}
			tmpNode, ok := decodeObj.(*corev1.Node)
			if !ok {
				return fmt.Errorf("not node yaml")
			}
			if tmpNode.Labels == nil {
				tmpNode.Labels = map[string]string{}
			}
			for k, v := range labelMap {
				tmpNode.Labels[k] = v
			}
			if _, err := clientset.CoreV1().Nodes().Create(ctx, tmpNode, metav1.CreateOptions{}); err != nil {
				return err
			}
		}
	}

	return nil
}
